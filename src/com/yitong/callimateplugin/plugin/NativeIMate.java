package com.yitong.callimateplugin.plugin;import java.io.ByteArrayOutputStream;import java.io.IOException;import java.util.Calendar;import org.apache.cordova.CallbackContext;import org.apache.cordova.CordovaPlugin;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import android.app.Activity;import android.bluetooth.BluetoothAdapter;import android.bluetooth.BluetoothDevice;import android.graphics.Bitmap;import android.graphics.Bitmap.CompressFormat;import android.graphics.BitmapFactory;import android.os.Bundle;import android.os.Environment;import android.os.Handler;import android.os.Message;import android.util.Base64;import android.util.Log;import android.widget.Toast;import com.csii.jsunion.common.peripheral.BankCardInfoBean;import com.csii.jsunion.common.peripheral.IdentityInfoBean;import com.csii.jsunion.common.peripheral.Task;import com.csii.jsunion.common.peripheral.Task.IErrorCallback;import com.csii.jsunion.common.peripheral.Task.ISucceedCallback;import com.csii.jsunion.common.peripheral.Task.Operate;import com.sunyard.device.SunyardPeripheral;import com.sunyard.utils.States;import com.sunyard.utils.Util;/** * 读取身份证和借记卡等信息 *  */public class NativeIMate extends CordovaPlugin {	// action 动作配置	public static final String ACTION_READ_ID_INFO = "IDCard";	public static final String ACTION_READ_IC_CARD = "IcCard";	public static final String ACTION_READ_BANK_CARD = "BankCard";	public static final String ACTION_FINGER_INFO = "finger";	public static final String ACTION_SIGNATURE_INFO = "signature";	public static final String ACTION_PASSWORD_INFO = "KeyBoard";	public static final String ACTION_CRADMACHINE_CRAD = "Kaika";	public static final String ACTION_ALERT_CARD = "Tanka";    private static String TAG = "NativeShensi";	private static String SUCCESS = "success";	private static String FAIL = "fail";	private static String RESULT_TYPE = "resultType";	private JSONObject jsonObject; // 返回到Html的Json数据	private CallbackContext cbc;	private Activity activity;//	private BluetoothAdapter mAdapter;//	private BluetoothDevice mDevice;	private static boolean bInitial = false;	private static boolean bStop = false;	private static boolean bConnected = false;//	private int m_sec1, m_sec2;//	private int m_msec1, m_msec2;//	private Calendar c;//	private static final int REQUEST_ENABLE_BT = 2;//	private XYD_ImateReadModel xyd_ImateReadModel;    private CallbackContext callbackContext;	// 背夹对象    String argType = "";	@Override	public boolean execute(String action, JSONArray args,			final CallbackContext callbackContext) throws JSONException {		this.callbackContext=callbackContext;		activity = this.cordova.getActivity();		cbc = callbackContext;		jsonObject = new JSONObject();		 // 读取类型		try {			JSONObject jo = (JSONObject) args.get(0); // 获取第一个JSONObject			argType = jo.getString("type");		} catch (JSONException e) {			jsonObject.put("MSG", "JSON_EXCEPTION");			callbackContext.error(jsonObject);			return false;		}		if (action.equals("startImate")) {//				@Override//				public void onClick(DialogInterface arg0, int arg1) {//					// TODO Auto-generated method stub					if(argType.equals(ACTION_READ_ID_INFO)){						readIDCard();//读取身份证信息					}else if(argType.equals(ACTION_READ_IC_CARD)){						readBankCard();//读取银行卡信息					}else if(argType.equals(ACTION_FINGER_INFO)){						readFingerInfo();//读取指纹信息					}else if(argType.equals(ACTION_SIGNATURE_INFO)){						signature();//调用签字板；					}else if(argType.equals(ACTION_PASSWORD_INFO)){						readpassword();//					}else if (argType.equals(ACTION_CRADMACHINE_CRAD)){					    fakaxiang();					}else if (argType.equals(ACTION_ALERT_CARD)){                        tanka();                    }				}		return true;	}	    private void tanka() {        SunyardPeripheral sunyard = new SunyardPeripheral(cordova.getActivity());        Task task = new Task(Operate.CARD_MACHINE_EJECT,isSucceed,                isError);        sunyard.addTask(task);            }    private void fakaxiang() {        final SunyardPeripheral sunyard = new SunyardPeripheral(cordova.getActivity());        Task task = new Task(Operate.CARD_MACHINE_CONNECT, new ISucceedCallback() {            @Override            public void onSucceed(Bundle arg0) {                Log.e(TAG, "发卡箱已连接！");                Task task = new Task(Operate.CARD_MACHINE_READCARD, isSucceed, isError);                sunyard.addTask(task);            }        }, new IErrorCallback() {            @Override            public void onError(Bundle arg0) {                Log.e(TAG, "发卡箱未连接！");                callbackContext.error(arg0.getString("MSG"));            }        });        sunyard.addTask(task);    }    private void readIDCard(){		SunyardPeripheral sunyard = new SunyardPeripheral(cordova.getActivity());		Task task = new Task(Operate.READ_IDENTITY,isSucceed,				isError);		sunyard.addTask(task); 		}	private void readBankCard(){//		final SunyardPeripheral sunyard = new SunyardPeripheral(cordova.getActivity());//		Task task = new Task(Operate.CARD_MACHINE_CONNECT, new ISucceedCallback() {//            //            @Override//            public void onSucceed(Bundle arg0) {//                Log.e(TAG, "发卡箱已连接！");//                Task task = new Task(Operate.CARD_MACHINE_READCARD,isSucceed,//                        isError);//                sunyard.addTask(task);  //            }//        },new IErrorCallback() {//            //            @Override//            public void onError(Bundle arg0) {//                Log.e(TAG, "发卡箱未连接！");//                callbackContext.error(arg0.getString("MSG"));//                //            }//        });	    SunyardPeripheral sunyard = new SunyardPeripheral(cordova.getActivity());	    Task task = new Task(Operate.READ_IC_CARD, isSucceed, isError);		sunyard.addTask(task);				}	private void readFingerInfo(){		SunyardPeripheral sunyard = new SunyardPeripheral(cordova.getActivity());		Task task = new Task(Operate.FINGERPRINT,isSucceed,				isError);		sunyard.addTask(task); 		}	private void signature() {	// TODO Auto-generated method stub		SunyardPeripheral sunyard = new SunyardPeripheral(cordova.getActivity());		Task task = new Task(Operate.SIGNATURE,isSucceed,				isError);		sunyard.addTask(task); 	}		private void readpassword() {		// TODO Auto-generated method stub		SunyardPeripheral sunyard=new SunyardPeripheral(cordova.getActivity());		Task  task=new Task(Operate.READ_PASSWORD, isSucceed, isError);		task.setPwdLength(6);		sunyard.addTask(task);	}			ISucceedCallback isSucceed = new ISucceedCallback() {		@Override		public void onSucceed(Bundle bundle) {			 String statecode=bundle.getString("retcode"); 			 JSONObject jsObject=new JSONObject();				if(States.READ_IDCARD_SUCCESS.equals(statecode)){			IdentityInfoBean bean = bundle.getParcelable("data");			try {			           jsObject.put("strName", bean.fullName);			           jsObject.put("strNo", bean.idNo);			           			           jsObject.put("strSex", bean.sex==1?"男":"女");			           jsObject.put("strBirthday", bean.birthday);			           jsObject.put("strAddress", bean.idAddr);			           Bitmap bmp=bean.icon;			           if(bmp!=null){			        	   ByteArrayOutputStream bos=new ByteArrayOutputStream();			        	   bmp.compress(CompressFormat.PNG, 100, bos);			        	   byte[] bytes = bos.toByteArray();			        	   String tp = Base64.encodeToString(									bytes, Base64.DEFAULT);			        	  			        	   jsObject.put("strImageCode",tp);			           }else{			        	   jsObject.put("strImageCode","");			           }			           jsObject.put("strNation",bean.nation);			           jsObject.put("strValidity", bean.beginDate+"至"+bean.endDate);			           Log.e("233333", bean.fullName+ bean.idNo+ bean.sex+bean.birthday+bean.idAddr			        		  +bean.photodata+bean.nation+bean.beginDate+bean.endDate);			} catch (JSONException e) {				// TODO Auto-generated catch block				callbackContext.error("");			}			callbackContext.success(jsObject);				}else if(States.READ_ICCARD_SUCCESS.equals(statecode)){					BankCardInfoBean bean=bundle.getParcelable("data");					try {						jsObject.put(RESULT_TYPE, SUCCESS);						jsObject.put("strCardNo", bean.cardNo);// 卡号						jsObject.put("strTrack2", bean.twoMagneticTrack);						jsObject.put("strTrack3", bean.threeMagneticTrack);						Log.e("233333", bean.cardNo+bean.twoMagneticTrack+bean.threeMagneticTrack);					} catch (JSONException e) {						// TODO Auto-generated catch block						callbackContext.error("银行卡读取失败");					}					callbackContext.success(jsObject);				}else if(States.READ_FINGERPRINT_SUCCESS.equals(statecode)){					try {						jsObject.put(RESULT_TYPE, SUCCESS);						jsObject.put("fingerInfo", bundle.getString("fingerprintfeature"));// 卡号						Log.e("fingerInfo", bundle.getString("fingerprintfeature"));					} catch (JSONException e) {						// TODO Auto-generated catch block						callbackContext.error("指纹读取失败");					}					callbackContext.success(jsObject);				}else if(States.GET_INPUTNAME_SUCCESS.equals(statecode)){					try {						jsObject.put(RESULT_TYPE, SUCCESS);						Bitmap bmp= BitmapFactory.decodeFile(Environment.getExternalStorageDirectory().getAbsolutePath()								+ "/test.bmp");						 if(bmp!=null){				        	   ByteArrayOutputStream bos=new ByteArrayOutputStream();				        	   bmp.compress(CompressFormat.PNG, 100, bos);				        	   byte[] bytes = bos.toByteArray();				        	   String tp = Base64.encodeToString(										bytes, Base64.DEFAULT);				        	   jsObject.put("signaturePath",tp);				        	   SunyardPeripheral sunyard = new SunyardPeripheral(cordova.getActivity());			                   Task task = new Task(Operate.CARD_MACHINE_EJECT,new ISucceedCallback() {			                       @Override			                       public void onSucceed(Bundle bundle) {			                           String retmsg = bundle.getString("retmsg");			                       }			                   }, isError);			                   sunyard.addTask(task);						 }					} catch (JSONException e) {						// TODO Auto-generated catch block						callbackContext.error("签名信息获取失败");					}					callbackContext.success(jsObject);				}else if(States.READ_PWD_SUCCESS.equals(statecode)){					 try {						jsObject.put(RESULT_TYPE, SUCCESS);						jsObject.put("password", bundle.getString("password"));					} catch (JSONException e) {						// TODO Auto-generated catch block						callbackContext.error("获取密码失败");						e.printStackTrace();					}					 callbackContext.success(jsObject);				}else if (bundle.getSerializable("operate") == Operate.CARD_MACHINE_READCARD){				    try {                        jsObject.put(RESULT_TYPE, SUCCESS);                        String cardNo = bundle.getString("cardNo");                        String oneMagneticTrack = bundle.getString("oneMagneticTrack");                        String twoMagneticTrack = bundle.getString("twoMagneticTrack");                        jsObject.put("strCardNo", cardNo);// 卡号                        jsObject.put("strTrack2", oneMagneticTrack);                        jsObject.put("strTrack3", twoMagneticTrack);                        Log.e("233333", cardNo+twoMagneticTrack+oneMagneticTrack);                                            } catch (JSONException e) {                        // TODO Auto-generated catch block                        callbackContext.error("银行卡读取失败");                    }                    callbackContext.success(jsObject);//                    SunyardPeripheral sunyard = new SunyardPeripheral(cordova.getActivity());//                    Task task = new Task(Operate.CARD_MACHINE_EJECT,new ISucceedCallback() {//                        @Override//                        public void onSucceed(Bundle bundle) {//                            String retmsg = bundle.getString("retmsg");//                        }////                    }, isError);//                    sunyard.addTask(task);				}			}					};		IErrorCallback isError = new IErrorCallback() {		@Override		public void onError(Bundle bundle) {						callbackContext.error(bundle.getString("MSG"));//			if(bundle.getSerializable("operate") == Operate.CARD_MACHINE_READCARD){//			    SunyardPeripheral sunyard = new SunyardPeripheral(cordova.getActivity());//			    Task task = new Task(Operate.CARD_MACHINE_RETAIN, new ISucceedCallback() {//		            @Override//		            public void onSucceed(Bundle bundle) {//		                String retmsg = bundle.getString("retmsg");//		            }////		        }, isError);//		        sunyard.addTask(task);//			}		}	};}